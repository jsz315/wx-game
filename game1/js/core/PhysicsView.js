"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var THREE = require("three");
var PhysicsView = (function () {
    function PhysicsView(mesh, type, world) {
        this.mesh = mesh;
        this.world = world;
        var box = new THREE.Box3().setFromObject(mesh);
        var size = box.getSize(new THREE.Vector3());
        var scale = type == "box" ? 1 : 2;
        this.body = world.add({
            type: type,
            size: [size.x / scale, size.y / scale, size.z / scale],
            pos: [mesh.position.x, mesh.position.y, mesh.position.z],
            rot: [0, 0, 0],
            move: true,
            density: 1,
            friction: 0.8,
            restitution: 0.1,
            belongsTo: 1,
            collidesWith: 0xffffffff
        });
    }
    PhysicsView.prototype.update = function () {
        this.mesh.position.copy(this.body.getPosition());
        this.mesh.quaternion.copy(this.body.getQuaternion());
        this.destory();
    };
    PhysicsView.prototype.destory = function () {
        if (this.mesh.position.y < -30) {
            var x = (0.5 - Math.random()) * 40;
            var y = 700;
            var z = (0.5 - Math.random()) * 40;
            this.body.resetPosition(x, y, z);
        }
    };
    return PhysicsView;
}());
exports.default = PhysicsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGh5c2ljc1ZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQaHlzaWNzVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUErQjtBQUcvQjtJQU1JLHFCQUFZLElBQWUsRUFBRSxJQUFXLEVBQUUsS0FBUztRQUMvQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNsQixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3RELEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hELEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsQ0FBQztZQUNWLFFBQVEsRUFBRSxHQUFHO1lBQ2IsV0FBVyxFQUFFLEdBQUc7WUFDaEIsU0FBUyxFQUFFLENBQUM7WUFDWixZQUFZLEVBQUUsVUFBVTtTQUMzQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsNEJBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELDZCQUFPLEdBQVA7UUFDSSxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQztZQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDcEM7SUFDTCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XHJcbmltcG9ydCBPSU1PIGZyb20gJ29pbW8nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaHlzaWNzVmlld3tcclxuXHJcbiAgICBtZXNoOlRIUkVFLk1lc2g7XHJcbiAgICBib2R5OmFueTtcclxuICAgIHdvcmxkOmFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNoOlRIUkVFLk1lc2gsIHR5cGU6c3RyaW5nLCB3b3JsZDphbnkpe1xyXG4gICAgICAgIHRoaXMubWVzaCA9IG1lc2g7XHJcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xyXG4gICAgICAgIGxldCBib3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QobWVzaCk7XHJcbiAgICAgICAgbGV0IHNpemUgPSBib3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuICAgICAgICBsZXQgc2NhbGUgPSB0eXBlID09IFwiYm94XCIgPyAxIDogMjtcclxuXHJcbiAgICAgICAgdGhpcy5ib2R5ID0gd29ybGQuYWRkKHsgXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsIC8vIHR5cGUgb2Ygc2hhcGUgOiBzcGhlcmUsIGJveCwgY3lsaW5kZXIgXHJcbiAgICAgICAgICAgIHNpemU6IFtzaXplLnggLyBzY2FsZSwgc2l6ZS55IC8gc2NhbGUsIHNpemUueiAvIHNjYWxlXSwgLy8gc2l6ZSBvZiBzaGFwZVxyXG4gICAgICAgICAgICBwb3M6IFttZXNoLnBvc2l0aW9uLngsIG1lc2gucG9zaXRpb24ueSwgbWVzaC5wb3NpdGlvbi56XSwgLy8gc3RhcnQgcG9zaXRpb24gaW4gZGVncmVlXHJcbiAgICAgICAgICAgIHJvdDogWzAsIDAsIDBdLCAvLyBzdGFydCByb3RhdGlvbiBpbiBkZWdyZWVcclxuICAgICAgICAgICAgbW92ZTogdHJ1ZSwgLy8gZHluYW1pYyBvciBzdGF0aXF1ZVxyXG4gICAgICAgICAgICBkZW5zaXR5OiAxLFxyXG4gICAgICAgICAgICBmcmljdGlvbjogMC44LFxyXG4gICAgICAgICAgICByZXN0aXR1dGlvbjogMC4xLFxyXG4gICAgICAgICAgICBiZWxvbmdzVG86IDEsIC8vIFRoZSBiaXRzIG9mIHRoZSBjb2xsaXNpb24gZ3JvdXBzIHRvIHdoaWNoIHRoZSBzaGFwZSBiZWxvbmdzLlxyXG4gICAgICAgICAgICBjb2xsaWRlc1dpdGg6IDB4ZmZmZmZmZmYgLy8gVGhlIGJpdHMgb2YgdGhlIGNvbGxpc2lvbiBncm91cHMgd2l0aCB3aGljaCB0aGUgc2hhcGUgY29sbGlkZXMuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCl7XHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLmNvcHkoIHRoaXMuYm9keS5nZXRQb3NpdGlvbigpICk7XHJcbiAgICAgICAgdGhpcy5tZXNoLnF1YXRlcm5pb24uY29weSggdGhpcy5ib2R5LmdldFF1YXRlcm5pb24oKSApO1xyXG4gICAgICAgIHRoaXMuZGVzdG9yeSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3RvcnkoKXtcclxuICAgICAgICBpZih0aGlzLm1lc2gucG9zaXRpb24ueSA8IC0zMCl7XHJcbiAgICAgICAgICAgIGxldCB4ID0gKDAuNSAtIE1hdGgucmFuZG9tKCkpICogNDA7XHJcbiAgICAgICAgICAgIGxldCB5ID0gNzAwO1xyXG4gICAgICAgICAgICBsZXQgeiA9ICgwLjUgLSBNYXRoLnJhbmRvbSgpKSAqIDQwO1xyXG4gICAgICAgICAgICB0aGlzLmJvZHkucmVzZXRQb3NpdGlvbih4LCB5LCB6KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=