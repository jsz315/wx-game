"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var THREE = require("../../miniprogram_npm/three/index");
var PhysicsView = (function () {
    function PhysicsView(mesh, type, world) {
        this.mesh = mesh;
        this.world = world;
        var box = new THREE.Box3().setFromObject(mesh);
        var size = box.getSize(new THREE.Vector3());
        var scale = type == "box" ? 1 : 2;
        this.body = world.add({
            type: type,
            size: [size.x / scale, size.y / scale, size.z / scale],
            pos: [mesh.position.x, mesh.position.y, mesh.position.z],
            rot: [0, 0, 0],
            move: true,
            density: 1,
            friction: 0.8,
            restitution: 0.1,
            belongsTo: 1,
            collidesWith: 0xffffffff
        });
    }
    PhysicsView.prototype.update = function () {
        this.mesh.position.copy(this.body.getPosition());
        this.mesh.quaternion.copy(this.body.getQuaternion());
        this.destory();
    };
    PhysicsView.prototype.destory = function () {
        if (this.mesh.position.y < -30) {
            var x = (0.5 - Math.random()) * 40;
            var y = 700;
            var z = (0.5 - Math.random()) * 40;
            this.body.resetPosition(x, y, z);
        }
    };
    return PhysicsView;
}());
exports.default = PhysicsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGh5c2ljc1ZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQaHlzaWNzVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlEQUEyRDtBQUczRDtJQU1JLHFCQUFZLElBQWUsRUFBRSxJQUFXLEVBQUUsS0FBUztRQUMvQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNsQixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3RELEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hELEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsQ0FBQztZQUNWLFFBQVEsRUFBRSxHQUFHO1lBQ2IsV0FBVyxFQUFFLEdBQUc7WUFDaEIsU0FBUyxFQUFFLENBQUM7WUFDWixZQUFZLEVBQUUsVUFBVTtTQUMzQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsNEJBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELDZCQUFPLEdBQVA7UUFDSSxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQztZQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDcEM7SUFDTCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcIi4uLy4uL21pbmlwcm9ncmFtX25wbS90aHJlZS9pbmRleFwiO1xyXG5pbXBvcnQgT0lNTyBmcm9tICcuLi8uLi9taW5pcHJvZ3JhbV9ucG0vb2ltby9pbmRleCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBoeXNpY3NWaWV3e1xyXG5cclxuICAgIG1lc2g6VEhSRUUuTWVzaDtcclxuICAgIGJvZHk6YW55O1xyXG4gICAgd29ybGQ6YW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1lc2g6VEhSRUUuTWVzaCwgdHlwZTpzdHJpbmcsIHdvcmxkOmFueSl7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbWVzaDtcclxuICAgICAgICB0aGlzLndvcmxkID0gd29ybGQ7XHJcbiAgICAgICAgbGV0IGJveCA9IG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdChtZXNoKTtcclxuICAgICAgICBsZXQgc2l6ZSA9IGJveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgICAgIGxldCBzY2FsZSA9IHR5cGUgPT0gXCJib3hcIiA/IDEgOiAyO1xyXG5cclxuICAgICAgICB0aGlzLmJvZHkgPSB3b3JsZC5hZGQoeyBcclxuICAgICAgICAgICAgdHlwZTogdHlwZSwgLy8gdHlwZSBvZiBzaGFwZSA6IHNwaGVyZSwgYm94LCBjeWxpbmRlciBcclxuICAgICAgICAgICAgc2l6ZTogW3NpemUueCAvIHNjYWxlLCBzaXplLnkgLyBzY2FsZSwgc2l6ZS56IC8gc2NhbGVdLCAvLyBzaXplIG9mIHNoYXBlXHJcbiAgICAgICAgICAgIHBvczogW21lc2gucG9zaXRpb24ueCwgbWVzaC5wb3NpdGlvbi55LCBtZXNoLnBvc2l0aW9uLnpdLCAvLyBzdGFydCBwb3NpdGlvbiBpbiBkZWdyZWVcclxuICAgICAgICAgICAgcm90OiBbMCwgMCwgMF0sIC8vIHN0YXJ0IHJvdGF0aW9uIGluIGRlZ3JlZVxyXG4gICAgICAgICAgICBtb3ZlOiB0cnVlLCAvLyBkeW5hbWljIG9yIHN0YXRpcXVlXHJcbiAgICAgICAgICAgIGRlbnNpdHk6IDEsXHJcbiAgICAgICAgICAgIGZyaWN0aW9uOiAwLjgsXHJcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAwLjEsXHJcbiAgICAgICAgICAgIGJlbG9uZ3NUbzogMSwgLy8gVGhlIGJpdHMgb2YgdGhlIGNvbGxpc2lvbiBncm91cHMgdG8gd2hpY2ggdGhlIHNoYXBlIGJlbG9uZ3MuXHJcbiAgICAgICAgICAgIGNvbGxpZGVzV2l0aDogMHhmZmZmZmZmZiAvLyBUaGUgYml0cyBvZiB0aGUgY29sbGlzaW9uIGdyb3VwcyB3aXRoIHdoaWNoIHRoZSBzaGFwZSBjb2xsaWRlcy5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKXtcclxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24uY29weSggdGhpcy5ib2R5LmdldFBvc2l0aW9uKCkgKTtcclxuICAgICAgICB0aGlzLm1lc2gucXVhdGVybmlvbi5jb3B5KCB0aGlzLmJvZHkuZ2V0UXVhdGVybmlvbigpICk7XHJcbiAgICAgICAgdGhpcy5kZXN0b3J5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdG9yeSgpe1xyXG4gICAgICAgIGlmKHRoaXMubWVzaC5wb3NpdGlvbi55IDwgLTMwKXtcclxuICAgICAgICAgICAgbGV0IHggPSAoMC41IC0gTWF0aC5yYW5kb20oKSkgKiA0MDtcclxuICAgICAgICAgICAgbGV0IHkgPSA3MDA7XHJcbiAgICAgICAgICAgIGxldCB6ID0gKDAuNSAtIE1hdGgucmFuZG9tKCkpICogNDA7XHJcbiAgICAgICAgICAgIHRoaXMuYm9keS5yZXNldFBvc2l0aW9uKHgsIHksIHopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==