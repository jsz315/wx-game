"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var THREE = require("../../miniprogram_npm/three/index");
var Store = (function () {
    function Store() {
        this.sphereGeos = [];
        this.boxGeos = [];
        this.mats = [];
        for (var i = 0; i < 8; i++) {
            this.sphereGeos.push(new THREE.SphereGeometry(0.2 + Math.random() * 2, 10, 10));
            var size = 0.2 + Math.random() * 2;
            this.boxGeos.push(new THREE.BoxGeometry(size, size, size));
            var color = new THREE.Color(0xffffff);
            var mat = new THREE.MeshStandardMaterial({ color: color });
            mat.map = new THREE.TextureLoader().load("images/img/m" + (i % 6 + 1) + ".jpg");
            mat.emissive = new THREE.Color(0, 0, 0);
            mat.metalness = 0.1;
            mat.roughness = 0.7;
            this.mats.push(mat);
        }
    }
    Store.prototype.getSphereBufferGeometry = function () {
        var n = Math.floor(Math.random() * this.sphereGeos.length);
        return this.sphereGeos[n];
    };
    Store.prototype.getBoxBufferGeometry = function () {
        var n = Math.floor(Math.random() * this.boxGeos.length);
        return this.boxGeos[n];
    };
    Store.prototype.getMaterial = function () {
        var n = Math.floor(Math.random() * this.mats.length);
        return this.mats[n];
    };
    return Store;
}());
exports.default = Store;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlEQUEyRDtBQUczRDtJQU1JO1FBSkEsZUFBVSxHQUFPLEVBQUUsQ0FBQztRQUNwQixZQUFPLEdBQU8sRUFBRSxDQUFDO1FBQ2pCLFNBQUksR0FBTyxFQUFFLENBQUM7UUFJVixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFDO1lBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVoRixJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRTNELElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0QyxJQUFJLEdBQUcsR0FBOEIsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7WUFDN0UsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztZQUNoRixHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO0lBRUwsQ0FBQztJQUVELHVDQUF1QixHQUF2QjtRQUNJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQ0FBb0IsR0FBcEI7UUFDSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsMkJBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0FBQyxBQXZDRCxJQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCIuLi8uLi9taW5pcHJvZ3JhbV9ucG0vdGhyZWUvaW5kZXhcIjtcclxuaW1wb3J0IE9JTU8gZnJvbSAnLi4vLi4vbWluaXByb2dyYW1fbnBtL29pbW8vaW5kZXgnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yZXtcclxuXHJcbiAgICBzcGhlcmVHZW9zOmFueSA9IFtdO1xyXG4gICAgYm94R2VvczphbnkgPSBbXTtcclxuICAgIG1hdHM6YW55ID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuXHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDg7IGkrKyl7XHJcbiAgICAgICAgICAgIHRoaXMuc3BoZXJlR2Vvcy5wdXNoKG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgwLjIgKyBNYXRoLnJhbmRvbSgpICogMiwgMTAsIDEwKSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2l6ZSA9IDAuMiArIE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgICAgICAgICB0aGlzLmJveEdlb3MucHVzaChuZXcgVEhSRUUuQm94R2VvbWV0cnkoc2l6ZSwgc2l6ZSwgc2l6ZSkpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKDB4ZmZmZmZmKTtcclxuICAgICAgICAgICAgbGV0IG1hdDpUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7Y29sb3J9KTtcclxuICAgICAgICAgICAgbWF0Lm1hcCA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZChcImltYWdlcy9pbWcvbVwiICsgKGkgJSA2ICsgMSkgKyBcIi5qcGdcIik7XHJcbiAgICAgICAgICAgIG1hdC5lbWlzc2l2ZSA9IG5ldyBUSFJFRS5Db2xvcigwLCAwLCAwKTtcclxuICAgICAgICAgICAgbWF0Lm1ldGFsbmVzcyA9IDAuMTtcclxuICAgICAgICAgICAgbWF0LnJvdWdobmVzcyA9IDAuNztcclxuICAgICAgICAgICAgdGhpcy5tYXRzLnB1c2gobWF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3BoZXJlQnVmZmVyR2VvbWV0cnkoKXtcclxuICAgICAgICBsZXQgbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuc3BoZXJlR2Vvcy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNwaGVyZUdlb3Nbbl07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Qm94QnVmZmVyR2VvbWV0cnkoKXtcclxuICAgICAgICBsZXQgbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuYm94R2Vvcy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJveEdlb3Nbbl07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWF0ZXJpYWwoKXtcclxuICAgICAgICBsZXQgbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMubWF0cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hdHNbbl07XHJcbiAgICB9XHJcbn0iXX0=