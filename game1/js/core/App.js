"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var THREE = require("../../miniprogram_npm/three/index");
var PhysicsView_1 = require("./PhysicsView");
var Store_1 = require("./Store");
var Fire_1 = require("./Fire");
var OIMO = require('../../miniprogram_npm/oimo/index');
console.log("oimo");
console.log(OIMO);
var App = (function () {
    function App(canvas) {
        this.updaters = [];
        this.store = new Store_1.default();
        this.canvas = canvas;
        this.world = new OIMO.World({
            timestep: 1 / 60,
            iterations: 8,
            broadphase: 2,
            worldscale: 1,
            random: true,
            info: false,
            gravity: [0, -9.8, 0]
        });
        this.initGraphics();
        this.initPhysics();
        this.createObjects();
        this.animate();
    }
    App.prototype.initGraphics = function () {
        this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.2, 2000);
        this.scene = new THREE.Scene();
        this.camera.position.set(-25, 25, 78);
        this.camera.lookAt(new THREE.Vector3());
        console.log(this.camera);
        this.renderer = new THREE.WebGLRenderer({
            canvas: this.canvas,
            antialias: true,
            alpha: true
        });
        this.renderer.setClearColor(0x000000);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.fire = new Fire_1.default();
        this.scene.add(this.fire.light);
        window.addEventListener('resize', this.onResize, false);
    };
    App.prototype.onResize = function (e) {
        this.size = this.getStageSize(true);
        this.canvas.width = this.size.width;
        this.canvas.height = this.size.height;
        this.camera.aspect = this.size.width / this.size.height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(this.size.width, this.size.height);
    };
    App.prototype.getStageSize = function (usePixel) {
        var size = { width: window.innerWidth };
        if (window.innerWidth > window.innerHeight) {
            size.height = window.innerHeight;
        }
        else {
            size.height = window.innerWidth;
        }
        if (usePixel) {
            size.width = size.width * window.devicePixelRatio;
            size.height = size.height * window.devicePixelRatio;
        }
        return size;
    };
    App.prototype.initPhysics = function () {
        this.addStaticBox([4, 40, 40], [-10, -4, 0], [0, 0, 0]);
        this.addStaticBox([4, 40, 40], [10, -4, 0], [0, 0, 0]);
        this.addStaticBox([80, 8, 80], [0, -2, 0], [30, 0, 0]);
    };
    App.prototype.addStaticBox = function (size, position, rotation) {
        this.world.add({ size: size, pos: position, rot: rotation, move: false });
        var ToRad = 0.0174532925199432957;
        var mat = new THREE.MeshStandardMaterial();
        mat.metalness = 0.1;
        mat.roughness = 0.72;
        mat.map = new THREE.TextureLoader().load("images/img/p6.jpg");
        var mesh = new THREE.Mesh(new THREE.BoxGeometry(), mat);
        mesh.scale.set(size[0], size[1], size[2]);
        mesh.position.set(position[0], position[1], position[2]);
        mesh.rotation.set(rotation[0] * ToRad, rotation[1] * ToRad, rotation[2] * ToRad);
        this.scene.add(mesh);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
    };
    App.prototype.createObjects = function () {
        for (var i = 0; i < 1000; i++) {
            var type = "sphere";
            if (i % 2) {
                type = "box";
            }
            var shape = void 0;
            if (type == "box") {
                shape = this.store.getBoxBufferGeometry();
            }
            else {
                shape = this.store.getSphereBufferGeometry();
            }
            var view = new THREE.Mesh(shape, this.store.getMaterial());
            var x = (0.5 - Math.random()) * 40;
            var y = Math.random() * 1600;
            var z = (0.5 - Math.random()) * 40;
            view.position.set(x, y, z);
            view.castShadow = true;
            view.receiveShadow = true;
            this.scene.add(view);
            this.updaters.push(new PhysicsView_1.default(view, type, this.world));
        }
    };
    App.prototype.initInput = function () {
    };
    App.prototype.animate = function () {
        var _this = this;
        requestAnimationFrame(function () {
            _this.animate();
        });
        this.world.step();
        this.fire.update();
        this.updaters.forEach(function (item) {
            item.update();
        });
        this.render();
    };
    App.prototype.render = function () {
        this.renderer.render(this.scene, this.camera);
    };
    return App;
}());
exports.default = App;
//# sourceMappingURL=data:application/json;base64,